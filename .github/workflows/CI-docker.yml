name: CI - Test Source Code and Docker Image

on:
  push:
    branches: 
      - '*'
  pull_request:
    branches:
      - '*'

jobs:
  test-source-code:
    strategy:
      matrix:
        os: [macos-latest, ubuntu-latest]
        node-version: [16.x, 18.x]
      fail-fast: false

    runs-on: ${{ matrix.os }}
    timeout-minutes: 15

    steps:
    - uses: actions/checkout@v4

    - name: Cache Node Modules
      uses: actions/cache@v3
      with:
        path: ~/.npm
        key: ${{ runner.os }}-node-${{ matrix.node-version }}-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-${{ matrix.node-version }}

    - name: Cache Yarn Dependencies
      uses: actions/cache@v3
      with:
        path: ~/.yarn/cache
        key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
        restore-keys: |
          ${{ runner.os }}-yarn-

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}

    - name: Install Yarn
      run: npm install -g yarn

    - name: Install Dependencies
      working-directory: ./api
      run: yarn

    - name: Seed Data
      working-directory: ./api
      run: yarn seed

    - name: Run Tests (With 50% Threshold)
      working-directory: ./api
      env:
        JWT_SECRET: ${{ secrets.JWT_SECRET }}
      run: |
        yarn test --json --outputFile=test-results.json || true
        total=$(jq '.numTotalTests' test-results.json)
        passed=$(jq '.numPassedTests' test-results.json)
        success_rate=$((passed * 100 / total))
        if [ $success_rate -lt 50 ]; then
          echo "Test success rate is below 50% ($success_rate%). Marking as failed."
          exit 1
        fi

    - name: Upload Test Results
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: test-results
        path: ./api/test-results/
        if-no-files-found: ignore

  build-docker:
    needs: test-source-code
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Log in to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}

      - name: Build Docker Image
        run: |
          docker build --build-arg JWT_SECRET=${{ secrets.JWT_SECRET }} -t ${{ secrets.DOCKER_USERNAME }}/cs360_calc_image:latest .

      - name: Push Docker Image to DockerHub
        run: docker push ${{ secrets.DOCKER_USERNAME }}/cs360_calc_image:latest

  test-docker-image:
    needs: build-docker
    runs-on: ubuntu-latest

    steps:
      - name: Log in to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}

      - name: Pull and Run Docker Image
        run: |
          docker pull ${{ secrets.DOCKER_USERNAME }}/cs360_calc_image:latest
          docker run -d --name test-container ${{ secrets.DOCKER_USERNAME }}/cs360_calc_image:latest

      - name: Run Automated Tests in Docker Container
        run: docker exec test-container yarn test

      - name: Clean Up Docker Container
        run: |
          docker stop test-container
          docker rm test-container